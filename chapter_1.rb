#1.1
# Имеется отсортированный список из
# 128 имен, и вы ищете в нем значение методом бинарного поиска.
# Какое максимальное количество проверок для этого может потребоваться?
n = 128
count = 1

until n == 2
  count += 1
  n /= 2
end

puts count
#=> 7
#================================================================================

# 1.2
# Знакомство с алгоритмами
# Предположим, размер списка увеличился вдвое.
# Как изменится максимальное количество проверок?
nu = 256
count = 1

until nu == 2
  count += 1
  nu /= 2
end

puts count
#=> 8
#================================================================================

# Для списка из 4 миллиардов чисел потребуется:
num = 2**32 # 4_000_000_000
count = 1

until num == 2
  count += 1
  num /= 2
end

puts count
#=> 32
#=================================================================================
#Допустим, проверка одного элемента занимает 1 миллисекунду (мс). При простом поиске Бобу придется проверить
# 100 элементов, поэтому поиск 100 мс. С другой стороны, при бинарном поиске достаточно проверить всего 7 элементов
# (log_2_100 равен приблизительно 7), а поиск займет 7 мс.
# Но реальный список может содержать более миллиарда элементов.
# Сколько времени в таком случае потребуется для выполнения простого поиска?
# 1_000_000_000 мс == 11 дней
# А при бинарном поиске?
# 32 мс
# =====================================================================================
# Шпаргалка
# 1:1 Бинарный поиск работает намного быстрее простого.
# 1:2 Время выполнения O(log п) быстрее О(п), а с увеличением размера списка,
# в котором ищется значение, оно становится намного быстрее.
# 1:3 Скорость алгоритмов не измеряется в секундах.
# 1:4 Время выполнения алгоритма описывается ростом количества операций.
# 1:5 Время выполнения алгоритмов выражается как О-большое.


